

//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Epiphany.Model.Settings
{
	/// <summary>
    /// EventArgs for the SettingChanged event
    /// </summary>
	public class SettingChangedEventArgs : EventArgs
	{
		private string settingName;

		public SettingChangedEventArgs(string settingName)
		{
			this.settingName = settingName;	
		}
		/// <summary>
		/// Gets the name of the setting that changed
		/// </summary>
		public string SettingName
		{
			get 
			{
				return this.settingName;
			}
		}
	}

	/// <summary>
    /// Represents an enum for the storage container
    /// </summary>
	public enum SettingContainer
	{
		Local,
		Roaming,
	}

	/// <summary>
    /// Represents a setting entry
    /// </summary>
	public class Setting
	{
		private SettingContainer container;
		private string name;
		/// <summary>
		/// Create an instance of Setting
		/// </summary>
		internal Setting(SettingContainer container, string name)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException(nameof(name));
			}

			Container = container;
			Name = name;
		}
		/// <summary>
		/// Gets the setting container
		/// </summary>
		public SettingContainer Container
		{
			get
			{
				return container;
			}
			private set
			{
				if (this.container == value) return;
				this.container = value;
			}
		}
		/// <summary>
		/// Gets the setting Name
		/// </summary>
		public string Name
		{
			get 
			{
				return this.name;
			}
			private set
			{
				if (this.name == value) return;
				this.name = value;
			}
		}
	}
	
	/// <summary>
    /// Represents a strongly-typed settings class
    /// </summary>
	public class ApplicationSettings
	{
		private static ApplicationSettings _instance;
		private static object syncRoot = new object();
		
		private IDictionary<string, Setting> settings;
		private ISettingStore store;

		private string AccessTokenDefault = string.Empty;
		private string AccessTokenSecretDefault = string.Empty;
		private int CurrentUserIdDefault = -1;
		private string CurrentUsernameDefault = string.Empty;
		private bool ShowAnimationsDefault = true;
		private bool EncryptAuthTokenDefault = false;
		private bool UseMyLocationDefault = false;
		private bool EnableLoggingDefault = true;
		private string UpdateTypeDefault = "all";
		private string UpdateFilterDefault = "friends";
		private string SortTypeDefault = "date_added";
		private string SortOrderDefault = "a";
		private string SearchTypeDefault = "All";
		private bool EnableTransparentTileDefault = true;
		
		public event EventHandler<SettingChangedEventArgs> SettingChanged;
		/// <summary>
		/// Raise the setting changed event
		/// </summary>
		public void RaiseSettingChanged(string name) => SettingChanged?.Invoke(this, new SettingChangedEventArgs(name));

		/// <summary>
		/// Create an instance of ApplicationSettings
		/// </summary>
		public ApplicationSettings()
		{
			this.settings = new Dictionary<string, Setting>();

			// Populate all settings
			this.settings["AccessToken"] = new Setting(SettingContainer.Local, "AccessToken");
			this.settings["AccessTokenSecret"] = new Setting(SettingContainer.Local, "AccessTokenSecret");
			this.settings["CurrentUserId"] = new Setting(SettingContainer.Local, "CurrentUserId");
			this.settings["CurrentUsername"] = new Setting(SettingContainer.Local, "CurrentUsername");
			this.settings["ShowAnimations"] = new Setting(SettingContainer.Local, "ShowAnimations");
			this.settings["EncryptAuthToken"] = new Setting(SettingContainer.Local, "EncryptAuthToken");
			this.settings["UseMyLocation"] = new Setting(SettingContainer.Local, "UseMyLocation");
			this.settings["EnableLogging"] = new Setting(SettingContainer.Roaming, "EnableLogging");
			this.settings["UpdateType"] = new Setting(SettingContainer.Roaming, "UpdateType");
			this.settings["UpdateFilter"] = new Setting(SettingContainer.Roaming, "UpdateFilter");
			this.settings["SortType"] = new Setting(SettingContainer.Roaming, "SortType");
			this.settings["SortOrder"] = new Setting(SettingContainer.Roaming, "SortOrder");
			this.settings["SearchType"] = new Setting(SettingContainer.Roaming, "SearchType");
			this.settings["EnableTransparentTile"] = new Setting(SettingContainer.Roaming, "EnableTransparentTile");
		}
		
		/// <summary>
		/// Gets the settings instance
		/// </summary>
		public static ApplicationSettings Instance
		{
			get 
			{
				if (_instance == null)
				{
					lock(syncRoot)
					{
						if (_instance == null)
							_instance = new ApplicationSettings();

					}
				}

				return _instance;
			}
		}

		/// <summary>
		/// Set the backing store for the settings
		/// </summary>
		public ISettingStore Store
		{
			get 
			{
				return this.store;
			}
			set 
			{
				if (this.store == value) return;
				this.store = value;
			}
		}

		/// <summary>
		/// Gets or sets the AccessToken setting
		/// </summary>
		public string AccessToken
		{
			get 
			{
				var setting = this.settings["AccessToken"];
				return Store.GetValueOrDefault<string>(setting, AccessTokenDefault);
			}
			set 
			{
				var setting = this.settings["AccessToken"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("AccessToken");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the AccessTokenSecret setting
		/// </summary>
		public string AccessTokenSecret
		{
			get 
			{
				var setting = this.settings["AccessTokenSecret"];
				return Store.GetValueOrDefault<string>(setting, AccessTokenSecretDefault);
			}
			set 
			{
				var setting = this.settings["AccessTokenSecret"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("AccessTokenSecret");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the CurrentUserId setting
		/// </summary>
		public int CurrentUserId
		{
			get 
			{
				var setting = this.settings["CurrentUserId"];
				return Store.GetValueOrDefault<int>(setting, CurrentUserIdDefault);
			}
			set 
			{
				var setting = this.settings["CurrentUserId"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("CurrentUserId");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the CurrentUsername setting
		/// </summary>
		public string CurrentUsername
		{
			get 
			{
				var setting = this.settings["CurrentUsername"];
				return Store.GetValueOrDefault<string>(setting, CurrentUsernameDefault);
			}
			set 
			{
				var setting = this.settings["CurrentUsername"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("CurrentUsername");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the ShowAnimations setting
		/// </summary>
		public bool ShowAnimations
		{
			get 
			{
				var setting = this.settings["ShowAnimations"];
				return Store.GetValueOrDefault<bool>(setting, ShowAnimationsDefault);
			}
			set 
			{
				var setting = this.settings["ShowAnimations"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("ShowAnimations");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the EncryptAuthToken setting
		/// </summary>
		public bool EncryptAuthToken
		{
			get 
			{
				var setting = this.settings["EncryptAuthToken"];
				return Store.GetValueOrDefault<bool>(setting, EncryptAuthTokenDefault);
			}
			set 
			{
				var setting = this.settings["EncryptAuthToken"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("EncryptAuthToken");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the UseMyLocation setting
		/// </summary>
		public bool UseMyLocation
		{
			get 
			{
				var setting = this.settings["UseMyLocation"];
				return Store.GetValueOrDefault<bool>(setting, UseMyLocationDefault);
			}
			set 
			{
				var setting = this.settings["UseMyLocation"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("UseMyLocation");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the EnableLogging setting
		/// </summary>
		public bool EnableLogging
		{
			get 
			{
				var setting = this.settings["EnableLogging"];
				return Store.GetValueOrDefault<bool>(setting, EnableLoggingDefault);
			}
			set 
			{
				var setting = this.settings["EnableLogging"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("EnableLogging");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the UpdateType setting
		/// </summary>
		public string UpdateType
		{
			get 
			{
				var setting = this.settings["UpdateType"];
				return Store.GetValueOrDefault<string>(setting, UpdateTypeDefault);
			}
			set 
			{
				var setting = this.settings["UpdateType"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("UpdateType");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the UpdateFilter setting
		/// </summary>
		public string UpdateFilter
		{
			get 
			{
				var setting = this.settings["UpdateFilter"];
				return Store.GetValueOrDefault<string>(setting, UpdateFilterDefault);
			}
			set 
			{
				var setting = this.settings["UpdateFilter"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("UpdateFilter");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the SortType setting
		/// </summary>
		public string SortType
		{
			get 
			{
				var setting = this.settings["SortType"];
				return Store.GetValueOrDefault<string>(setting, SortTypeDefault);
			}
			set 
			{
				var setting = this.settings["SortType"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("SortType");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the SortOrder setting
		/// </summary>
		public string SortOrder
		{
			get 
			{
				var setting = this.settings["SortOrder"];
				return Store.GetValueOrDefault<string>(setting, SortOrderDefault);
			}
			set 
			{
				var setting = this.settings["SortOrder"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("SortOrder");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the SearchType setting
		/// </summary>
		public string SearchType
		{
			get 
			{
				var setting = this.settings["SearchType"];
				return Store.GetValueOrDefault<string>(setting, SearchTypeDefault);
			}
			set 
			{
				var setting = this.settings["SearchType"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("SearchType");
				}
			}
		}		
		/// <summary>
		/// Gets or sets the EnableTransparentTile setting
		/// </summary>
		public bool EnableTransparentTile
		{
			get 
			{
				var setting = this.settings["EnableTransparentTile"];
				return Store.GetValueOrDefault<bool>(setting, EnableTransparentTileDefault);
			}
			set 
			{
				var setting = this.settings["EnableTransparentTile"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("EnableTransparentTile");
				}
			}
		}		
	}
}

