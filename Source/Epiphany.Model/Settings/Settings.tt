<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>


//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Epiphany.Model.Settings
{
	/// <summary>
    /// EventArgs for the SettingChanged event
    /// </summary>
	public class SettingChangedEventArgs : EventArgs
	{
		private string settingName;

		public SettingChangedEventArgs(string settingName)
		{
			this.settingName = settingName;	
		}
		/// <summary>
		/// Gets the name of the setting that changed
		/// </summary>
		public string SettingName
		{
			get 
			{
				return this.settingName;
			}
		}
	}

	/// <summary>
    /// Represents an enum for the storage container
    /// </summary>
	public enum SettingContainer
	{
<# foreach (var container in GetContainers())
{
#>		<#= container #>,
<# } #>
	}

	/// <summary>
    /// Represents a setting entry
    /// </summary>
	public class Setting
	{
		private SettingContainer container;
		private string name;
		/// <summary>
		/// Create an instance of Setting
		/// </summary>
		internal Setting(SettingContainer container, string name)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException(nameof(name));
			}

			Container = container;
			Name = name;
		}
		/// <summary>
		/// Gets the setting container
		/// </summary>
		public SettingContainer Container
		{
			get
			{
				return container;
			}
			private set
			{
				if (this.container == value) return;
				this.container = value;
			}
		}
		/// <summary>
		/// Gets the setting Name
		/// </summary>
		public string Name
		{
			get 
			{
				return this.name;
			}
			private set
			{
				if (this.name == value) return;
				this.name = value;
			}
		}
	}
	
	/// <summary>
    /// Represents a strongly-typed settings class
    /// </summary>
	public class ApplicationSettings
	{
		private static ApplicationSettings _instance;
		private static object syncRoot = new object();
		
		private IDictionary<string, Setting> settings;
		private ISettingStore store;

<#  foreach (var entry in this.ReadSettings())
	{
#>		private <#= entry.Type #> <#= entry.Name #>Default = <#= entry.DefaultValue #>;
<#	} #>
		
		public event EventHandler<SettingChangedEventArgs> SettingChanged;
		/// <summary>
		/// Raise the setting changed event
		/// </summary>
		public void RaiseSettingChanged(string name) => SettingChanged?.Invoke(this, new SettingChangedEventArgs(name));

		/// <summary>
		/// Create an instance of ApplicationSettings
		/// </summary>
		public ApplicationSettings()
		{
			this.settings = new Dictionary<string, Setting>();

			// Populate all settings
<# foreach (var setting in this.ReadSettings())
	{
#>			this.settings["<#= setting.Name #>"] = new Setting(SettingContainer.<#= setting.Container #>, "<#= setting.Name #>");
<#	} #>
		}
		
		/// <summary>
		/// Gets the settings instance
		/// </summary>
		public static ApplicationSettings Instance
		{
			get 
			{
				if (_instance == null)
				{
					lock(syncRoot)
					{
						if (_instance == null)
							_instance = new ApplicationSettings();

					}
				}

				return _instance;
			}
		}

		/// <summary>
		/// Set the backing store for the settings
		/// </summary>
		public ISettingStore Store
		{
			get 
			{
				return this.store;
			}
			set 
			{
				if (this.store == value) return;
				this.store = value;
			}
		}

<#	foreach (var entry in this.ReadSettings()) { #>
		/// <summary>
		/// Gets or sets the <#= entry.Name #> setting
		/// </summary>
		public <#= entry.Type #> <#= entry.Name #>
		{
			get 
			{
				var setting = this.settings["<#= entry.Name #>"];
				return Store.GetValueOrDefault<<#= entry.Type #>>(setting, <#= entry.Name #>Default);
			}
			set 
			{
				var setting = this.settings["<#= entry.Name #>"];
				if (Store.AddOrUpdate(setting, value))
				{
					RaiseSettingChanged("<#= entry.Name #>");
				}
			}
		}		
<# } #>
	}
}

<#+

	public class SettingEntry
	{
		public string Name;

		public string Type;

		public string DefaultValue;

		public string Container;
	}

	public IList<SettingEntry> ReadSettings()
	{
		List<SettingEntry> settings = new List<SettingEntry>();
		string absolutePath = Host.ResolvePath(@"ApplicationSettings.xml");
		XmlDocument document = new XmlDocument();
		document.Load(absolutePath);

		foreach (XmlNode containerNode in document.SelectNodes("/Settings/SettingContainer"))
		{
			string containerName = containerNode.Attributes["Name"].Value;

			foreach (XmlNode node in containerNode.SelectNodes("Setting"))
			{
				SettingEntry entry = new SettingEntry()
				{
					Name = node.Attributes["Name"].Value,
					Type = node.Attributes["Type"].Value,
					DefaultValue = node.InnerText,
					Container = containerName
				};

				settings.Add(entry);
			}
		}

		return settings;
	}

	public IList<string> GetContainers()
	{
		List<string> containers = new List<string>();
		string absolutePath = Host.ResolvePath(@"ApplicationSettings.xml");
		XmlDocument document = new XmlDocument();
		document.Load(absolutePath);

		foreach (XmlNode containerNode in document.SelectNodes("/Settings/SettingContainer"))
		{
			string containerName = containerNode.Attributes["Name"].Value;
			containers.Add(containerName);
		}

		return containers;
	}

#>