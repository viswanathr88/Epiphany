<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>


//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;

namespace Epiphany.Model.Settings
{
	/// <summary>
    /// EventArgs for the SettingChanged event
    /// </summary>
	public class SettingChangedEventArgs : EventArgs
	{
		private string settingName;

		public SettingChangedEventArgs(string settingName)
		{
			this.settingName = settingName;	
		}
		/// <summary>
		/// Gets the name of the setting that changed
		/// </summary>
		public string SettingName
		{
			get 
			{
				return this.settingName;
			}
		}
	}
	
	/// <summary>
    /// Represents a strongly-typed settings class
    /// </summary>
	public class ApplicationSettings
	{
		private static ApplicationSettings _instance;
		private static object syncRoot = new object();
		private Model.Settings.ISettingStorage storage = new DefaultSettingsStorage();
<#  foreach (var entry in this.ReadSettings())
	{
#>		private <#= entry.Type #> <#= entry.Name #>Default = <#= entry.DefaultValue #>;
<#	} #>
		public event EventHandler<SettingChangedEventArgs> SettingChanged;
		
		/// <summary>
		/// Gets the settings instance
		/// </summary>
		public static ApplicationSettings Instance
		{
			get 
			{
				if (_instance == null)
				{
					lock(syncRoot)
					{
						if (_instance == null)
							_instance = new ApplicationSettings();

					}
				}

				return _instance;
			}
		}
		/// <summary>
		/// Raise the setting changed event
		/// </summary>
		public void RaiseSettingChanged(string name) => SettingChanged?.Invoke(this, new SettingChangedEventArgs(name));
		/// <summary>
		/// Set the backing store for the settings
		/// </summary>
		public void SetBackingStore(Model.Settings.ISettingStorage store)
		{
			if (store == null)
			{
				throw new ArgumentNullException(nameof(store));
			}

			storage = store;
		}

<#	foreach (var entry in this.ReadSettings()) { #>
		/// <summary>
		/// Gets or sets the <#= entry.Name #> setting
		/// </summary>
		public <#= entry.Type #> <#= entry.Name #>
		{
			get 
			{ 
				return storage.GetValueOrDefault<<#= entry.Type #>>(@"<#= entry.Name #>", <#= entry.Name #>Default);
			}
			set 
			{
				if (storage.AddOrUpdate(@"<#= entry.Name #>", value))
				{
					RaiseSettingChanged(@"<#= entry.Name #>");
				}
			}
		}		
<# } #>
	}
}

<#+

	public class SettingEntry
	{
		public string Name;

		public string Type;

		public string DefaultValue;
	}

	public IList<SettingEntry> ReadSettings()
	{
		List<SettingEntry> settings = new List<SettingEntry>();
		XmlDocument document = new XmlDocument();
		string absolutePath = Host.ResolvePath(@"ApplicationSettings.xml");
		document.Load(absolutePath);
		foreach (XmlNode node in document.SelectNodes("/Settings/Setting"))
		{
			SettingEntry entry = new SettingEntry()
			{
				Name = node.Attributes["Name"].Value,
				Type = node.Attributes["Type"].Value,
				DefaultValue = node.InnerText
			};

			settings.Add(entry);
		}

		return settings;
	}

#>